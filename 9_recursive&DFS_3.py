## 재귀함수&DFS_문제3: 검정색 영역 구하기
'''
선형탐색하다가, 1을 발견하면, DFS(1이 발견된 x좌표, 1이 발견된 y좌표)함수로 현재위치를 0으로 바꿔
이후, 현재위치와 인접한 칸에 1이 있으면 그 위치로 재귀함수 호출
'''
dx=[-1,0,1,0]
dy=[0,1,0,-1]
def DFS(x,y,board):
    board[x][y] = 0     # 도착한 현재위치를 0으로 만들고, 이제 4방향탐색해서 1인 위치 찾아
    for k in range(4):
        nx = x + dx[k]
        ny = y + dy[k]
        if nx>=0 and nx<5 and ny>=0 and ny<5 and board[nx][ny]==1:      # 격자안이면서, 인접한 4방향에 1인위치(검은색칸)가 있다면 그곳으로 재귀함수 호출
            DFS(nx,ny,board)
# 결국 위의 DFS재귀함수가 열심히 돌면, 연결된 검은색 칸들을 전부 0으로 업데이트 한다. 
def solution(board):
    answer = 0
    for i in range(5):
        for j in range(5):
            if board[i][j]==1:      # 탐색시, 최초 1이 발견되면, answer+=1해서 새로운 영역1개 발견했다고 선언하고, 그 지점부터 DFS()로 조사하는 것
                answer+=1
                DFS(i,j,board)
    return answer
# 이렇게 하나의 지점에서부터 퍼져나가면서 재귀함수를 이용한 알고리즘을 블러드필 알고리즘이라고 한다.

print(solution([[0, 1, 1, 0, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 1, 1, 0]]))
print(solution([[1, 1, 1, 0, 1], [1, 1, 1, 0, 1], [0, 0, 1, 0, 0], [1, 1, 0, 1, 0], [1, 0, 1, 0, 0]]))
print(solution([[0, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 0, 1, 1, 0]]))
print(solution([[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0]]))

