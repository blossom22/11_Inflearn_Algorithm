# 시뮬레이션 문제5_위험지역
# 한칸한칸들의 인접 8칸을 스캔해서 지뢰있으면 현재 칸을 answer에 +1하는 풀이이다.
def solution(board):
    answer = 0
    dx=[-1,-1,0,1,1,1,0,-1]
    dy=[0,1,1,1,0,-1,-1,-1]
    n = len(board)
    for i in range(n):
        for j in range(n):
            for k in range(8):
                nx = i+dx[k]
                ny = j+dy[k]
                # 격자를 벗어나지 않되, 인접한 8칸중에 1(폭탄)이 있고, 현재위치는 0(빈땅)일때, answer(위험지역)을 +1하고, 1이 인접한8칸에 여러개있어 중복으로 카운트되는 것을 막기위해, break문 추가한다.
                if nx>=0 and nx<n and ny>=0 and ny<n and board[nx][ny]==1 and board[i][j]==0:
                    answer+=1
                    break
    return answer
print(solution([[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]))
print(solution([[1, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]]))
print(solution([[0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0]]))
print(solution([[0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0]]))


# 이런 풀이도 가능하다. 먼저 1을 찾아내서 그 인접지역의 숫자를 다른 값(2)으로 바꿔(위험지역표시: 나중에 중복카운팅 피하려고)
def solution(board):
    answer = 0
    dx=[-1,-1,0,1,1,1,0,-1]
    dy=[0,1,1,1,0,-1,-1,-1]
    n = len(board)
    for i in range(n):
        for j in range(n):
            # 만약 현재위치가 1이면(지뢰) 아래 코드 진행
            if board[i][j]==1:
                for k in range(8):
                    nx = i+dx[k]
                    ny = j+dy[k]
                    # 격자 안 벗어나야한다 + 현재지뢰의 인접8칸이 빈 땅이어야 한다. 
                    if nx>=0 and nx<n and ny>=0 and ny<n and board[nx][ny]==0:
                        board[nx][ny]=2
                        answer+=1
    return answer
print(solution([[0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]))
print(solution([[1, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]]))
print(solution([[0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0]]))
print(solution([[0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0]]))
