# 시뮬레이션 문제1_웅덩이
# 가장자리도 포함해서 비교하여 웅덩이를 찾는 풀이이다. 
dx = [-1,0,1,0]
dy = [0,1,0,-1]
def solution(nums):
    answer = 0
    # 초기 배열세팅
    arr = [[1000]*7 for _ in range(7)]
    for i in range(1,6):
        for j in range(1,6):
            arr[i][j] = nums[i-1][j-1]
    # 웅덩이 찾는 과정
    for i in range(1,6):
        for j in range(1,6):
            cnt = 0
            for k in range(4):
                nx = i+dx[k]
                ny = j+dy[k]
                if arr[nx][ny] > arr[i][j]:
                    cnt+=1
            if cnt==4:
                answer+=1
    return answer

print(solution([[10, 20, 50, 30, 20], [20, 30, 50, 70, 90], [10, 15, 25, 80, 35], [25, 35, 40, 55, 80], [30, 20, 35, 40, 90]]))
print(solution([[80, 25, 10, 65, 100], [20, 10, 32, 70, 33], [45, 10, 88, 9, 90], [10, 35, 10, 55, 66], [10, 84, 65, 88, 99]]))
print(solution([[33, 22, 55, 65, 55], [55, 88, 99, 12, 19], [18, 33, 25, 57, 77], [46, 78, 54, 55, 99], [33, 25, 47, 85, 17]]))


# 위처럼 초기 배열세팅 안하고 하는 방법
def solution(nums):
    answer = 0
    n = len(nums)
    dx = [-1,0,1,0]
    dy = [0,1,0,-1]
    for i in range(n):
        for j in range(n):
            flag = True     # flag가 True이면, 현재위치(i행j열)는 웅덩이다.(일단 웅덩이라고 가정)
            for k in range(4):
                nx = i+dx[k]
                ny = j+dy[k]
                # 배열의 밖으로 빠져나가는 경우는 보면 안되니까 아래처럼 0이상 n미만 조건을 건다. 배열에서 벗어나는 인접위치들은 전부 현재위치값보다 클 것이라고 가정!
                # 현재위치에서 인접한 4방향에 나보다 작거나 같은 놈이 있으면 현재위치는 웅덩이가 아님
                # 이때 주의할 점은 nums[i][j]>=nums[nx][ny] 이 조건문이 0이상 n미만 조건들보다 뒤쪽에 있어야함. 아니면 인덱싱에러뜸
                # 그리고 배열의 가장자리값들은 nums[i][j]>=nums[nx][ny] 이 조건문으로 비교하지 않아도, 당연히 배열에서 벗어나는 인접위치는 현재위치보다 클 것이라고 생각하는것
                if nx>=0 and nx<n and ny>=0 and ny<n and nums[i][j]>=nums[nx][ny]:
                    flag = False
                    break
            # 만약 4방향 모두 나보다 컸다면, 현재위치는 웅덩이다.
            if flag:
                answer+=1
    return answer
print(solution([[10, 20, 50, 30, 20], [20, 30, 50, 70, 90], [10, 15, 25, 80, 35], [25, 35, 40, 55, 80], [30, 20, 35, 40, 90]]))
print(solution([[80, 25, 10, 65, 100], [20, 10, 32, 70, 33], [45, 10, 88, 9, 90], [10, 35, 10, 55, 66], [10, 84, 65, 88, 99]]))
print(solution([[33, 22, 55, 65, 55], [55, 88, 99, 12, 19], [18, 33, 25, 57, 77], [46, 78, 54, 55, 99], [33, 25, 47, 85, 17]]))